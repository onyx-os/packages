From 87fe811183db51769d24bb5a048a3ea68b08b3f7 Mon Sep 17 00:00:00 2001
From: Pedro Falcato <pedro.falcato@gmail.com>
Date: Sat, 22 Mar 2025 20:31:56 +0000
Subject: [PATCH] Add onyx support

Signed-off-by: Pedro Falcato <pedro.falcato@gmail.com>
---
 libuv.spec         |  38 ++--
 onyx-support.patch | 489 +++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 510 insertions(+), 17 deletions(-)
 create mode 100644 onyx-support.patch

diff --git a/libuv.spec b/libuv.spec
index 28acd52..802c978 100644
--- a/libuv.spec
+++ b/libuv.spec
@@ -1,11 +1,7 @@
 # Run the tests by default on Fedora
 # Some of the network tests fail on RHEL/CentOS Stream due to the network
 # configuration on the builders
-%if 0%{?rhel}
 %bcond tests 0
-%else
-%bcond tests 1
-%endif
 
 Name:           libuv
 Epoch:          1
@@ -19,8 +15,8 @@ Summary:        Platform layer for node.js
 # include/uv/tree.h is BSD-2-Clause
 License:        MIT AND CC-BY-4.0 AND ISC AND BSD-2-Clause
 URL:            http://libuv.org/
-Source0:        http://dist.libuv.org/dist/v%{version}/libuv-v%{version}.tar.gz
-Source1:        https://dist.libuv.org/dist/v%{version}/%{name}-v%{version}.tar.gz.sign
+Source0:        https://dist.libuv.org/dist/v%{version}/libuv-v%{version}.tar.gz
+#Source1:        https://dist.libuv.org/dist/v%{version}/%{name}-v%{version}.tar.gz.sign
 # mkdir temp
 # gpg --no-default-keyring --keyring temp/keyring.gpg --keyserver keyserver.ubuntu.com \
 #  --recv-keys D77B1E34243FBAF05F8E9CC34F55C8C846AB89B9  \
@@ -30,16 +26,17 @@ Source1:        https://dist.libuv.org/dist/v%{version}/%{name}-v%{version}.tar.
 #  612F0EAD9401622379DF4402F28C3C8DA33C03BE \
 #  && gpg --no-default-keyring --keyring temp/keyring.gpg --output temp/keysuv.gpg --export
 # cp temp/keysuv.gpg .
-Source2:        keysuv.gpg
+#Source2:        keysuv.gpg
 Source3:        libuv.abignore
 
-BuildRequires:  cmake
+#BuildRequires:  cmake
 BuildRequires:  gcc
-BuildRequires:  gnupg2
+#BuildRequires:  gnupg2
 # Documentation
 BuildRequires:  make
-BuildRequires:  python3-sphinx
+#BuildRequires:  python3-sphinx
 
+Patch0: onyx-support.patch
 
 %description
 libuv is a new platform layer for Node. Its purpose is to abstract IOCP on
@@ -64,31 +61,36 @@ Static library (.a) version of libuv.
 
 
 %prep
-gpgv2 --keyring %{SOURCE2} %{SOURCE1} %{SOURCE0}
+#gpgv2 --keyring %{SOURCE2} %{SOURCE1} %{SOURCE0}
 %autosetup -n %{name}-v%{version} -p1
 
 %build
 %if %{with tests}
-%cmake -DBUILD_TESTING=ON
+cmake -DBUILD_TESTING=ON
 %else
-%cmake -DBUILD_TESTING=OFF
+cmake -DBUILD_TESTING=OFF -DCMAKE_INSTALL_PREFIX=%{_prefix}
 %endif
-%cmake_build
+%make_build
+
 # Build Documentation
+%if 0
 cd docs
 make man
 cd ..
+%endif
 
 %install
-%cmake_install
+%make_install
 # install documentation
+%if 0
 mkdir -p  %{buildroot}/%{_mandir}/man1/
 install -p -m 644 docs/build/man/libuv.1 %{buildroot}/%{_mandir}/man1/
+%endif
 mkdir -p %{buildroot}%{_libdir}/libuv/
 install -Dm0644 -t %{buildroot}%{_libdir}/libuv/ %{SOURCE3}
 # Remove packaged license files
-rm %{buildroot}/%{_docdir}/libuv/LICENSE
-rm %{buildroot}/%{_docdir}/libuv/LICENSE-extra
+rm -f %{buildroot}/%{_docdir}/libuv/LICENSE
+rm -f %{buildroot}/%{_docdir}/libuv/LICENSE-extra
 
 
 %check
@@ -106,7 +108,9 @@ env UV_TEST_TIMEOUT_MULTIPLIER=10 ./%{__cmake_builddir}/uv_run_tests_a
 %{_libdir}/%{name}.so.1.*
 %dir %{_libdir}/%{name}
 %{_libdir}/%{name}/libuv.abignore
+%if 0
 %{_mandir}/man1/%{name}.1*
+%endif
 
 %files devel
 %{_includedir}/uv.h
diff --git a/onyx-support.patch b/onyx-support.patch
new file mode 100644
index 0000000..aebe813
--- /dev/null
+++ b/onyx-support.patch
@@ -0,0 +1,489 @@
+Index: libuv-v1.49.2/CMakeLists.txt
+===================================================================
+--- libuv-v1.49.2.orig/CMakeLists.txt
++++ libuv-v1.49.2/CMakeLists.txt
+@@ -333,6 +333,26 @@ if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
+        src/unix/random-sysctl-linux.c)
+ endif()
+ 
++if(CMAKE_SYSTEM_NAME STREQUAL "Onyx")
++  list(APPEND uv_libraries dl rt)
++  list(APPEND uv_headers
++       include/uv/linux.h
++  )
++  list(APPEND uv_defines _GNU_SOURCE)
++  list(APPEND uv_sources
++       src/unix/posix-poll.c
++       src/unix/posix-hrtime.c
++       src/unix/bsd-ifaddrs.c
++       src/unix/no-fsevents.c
++       src/unix/procfs-exepath.c
++       src/unix/proctitle.c
++       src/unix/sysinfo-loadavg.c
++       src/unix/sysinfo-memory.c
++       src/unix/random-getrandom.c
++       src/unix/onyx.c
++  )
++endif()
++
+ if(CMAKE_SYSTEM_NAME STREQUAL "NetBSD")
+   list(APPEND uv_sources src/unix/netbsd.c)
+   list(APPEND uv_libraries kvm)
+Index: libuv-v1.49.2/include/uv/onyx.h
+===================================================================
+--- /dev/null
++++ libuv-v1.49.2/include/uv/onyx.h
+@@ -0,0 +1,37 @@
++/* Copyright libuv project contributors. All rights reserved.
++ *
++ * Permission is hereby granted, free of charge, to any person obtaining a copy
++ * of this software and associated documentation files (the "Software"), to
++ * deal in the Software without restriction, including without limitation the
++ * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
++ * sell copies of the Software, and to permit persons to whom the Software is
++ * furnished to do so, subject to the following conditions:
++ *
++ * The above copyright notice and this permission notice shall be included in
++ * all copies or substantial portions of the Software.
++ *
++ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
++ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
++ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
++ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
++ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
++ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
++ * IN THE SOFTWARE.
++ */
++
++#ifndef UV_ONYX_H
++#define UV_ONYX_H
++
++#define UV_PLATFORM_LOOP_FIELDS                                               \
++  uv__io_t inotify_read_watcher;                                              \
++  int inotify_fd;                                                             \
++  struct pollfd* poll_fds;                                                    \
++  size_t poll_fds_used;                                                       \
++  size_t poll_fds_size;                                                       \
++  unsigned char poll_fds_iterating;                                           \
++
++#define UV_PLATFORM_FS_EVENT_FIELDS   \
++	void *watchers[2];            \
++	int wd;                       \
++
++#endif /* UV_ONYX_H */
+Index: libuv-v1.49.2/include/uv/unix.h
+===================================================================
+--- libuv-v1.49.2.orig/include/uv/unix.h
++++ libuv-v1.49.2/include/uv/unix.h
+@@ -62,6 +62,8 @@
+       defined(__OpenBSD__)         || \
+       defined(__NetBSD__)
+ # include "uv/bsd.h"
++#elif defined(__onyx__)
++# include "uv/onyx.h"
+ #elif defined(__CYGWIN__) || \
+       defined(__MSYS__)   || \
+       defined(__HAIKU__)  || \
+Index: libuv-v1.49.2/src/unix/internal.h
+===================================================================
+--- libuv-v1.49.2.orig/src/unix/internal.h
++++ libuv-v1.49.2/src/unix/internal.h
+@@ -181,7 +181,7 @@ struct uv__stream_queued_fds_s {
+   int fds[1];
+ };
+ 
+-#ifdef __linux__
++#if defined(__linux__) || defined(__onyx__)
+ struct uv__statx_timestamp {
+   int64_t tv_sec;
+   uint32_t tv_nsec;
+@@ -219,7 +219,8 @@ struct uv__statx {
+     defined(__FreeBSD__) || \
+     defined(__linux__) || \
+     defined(__OpenBSD__) || \
+-    defined(__NetBSD__)
++    defined(__NetBSD__) || \
++    defined(__onyx__)
+ #define uv__nonblock uv__nonblock_ioctl
+ #define UV__NONBLOCK_IS_IOCTL 1
+ #else
+Index: libuv-v1.49.2/src/unix/linux.c
+===================================================================
+--- libuv-v1.49.2.orig/src/unix/linux.c
++++ libuv-v1.49.2/src/unix/linux.c
+@@ -634,7 +634,7 @@ static void uv__iou_delete(struct uv__io
+   }
+ }
+ 
+-
++#ifdef __linux__
+ int uv__platform_loop_init(uv_loop_t* loop) {
+   uv__loop_internal_fields_t* lfields;
+ 
+@@ -653,7 +653,7 @@ int uv__platform_loop_init(uv_loop_t* lo
+ 
+   return 0;
+ }
+-
++#endif
+ 
+ int uv__io_fork(uv_loop_t* loop) {
+   int err;
+Index: libuv-v1.49.2/src/unix/bsd-ifaddrs.c
+===================================================================
+--- libuv-v1.49.2.orig/src/unix/bsd-ifaddrs.c
++++ libuv-v1.49.2/src/unix/bsd-ifaddrs.c
+@@ -27,7 +27,7 @@
+ 
+ #include <ifaddrs.h>
+ #include <net/if.h>
+-#if !defined(__CYGWIN__) && !defined(__MSYS__) && !defined(__GNU__)
++#if !defined(__onyx__) && !defined(__CYGWIN__) && !defined(__MSYS__) && !defined(__GNU__)
+ #include <net/if_dl.h>
+ #endif
+ 
+@@ -40,7 +40,7 @@ static int uv__ifaddr_exclude(struct ifa
+     return 1;
+   if (ent->ifa_addr == NULL)
+     return 1;
+-#if !defined(__CYGWIN__) && !defined(__MSYS__) && !defined(__GNU__)
++#if !defined(__onyx__) && !defined(__CYGWIN__) && !defined(__MSYS__) && !defined(__GNU__)
+   /*
+    * If `exclude_type` is `UV__EXCLUDE_IFPHYS`, return whether `sa_family`
+    * equals `AF_LINK`. Otherwise, the result depends on the operating
+@@ -69,7 +69,7 @@ int uv_interface_addresses(uv_interface_
+   struct ifaddrs* addrs;
+   struct ifaddrs* ent;
+   uv_interface_address_t* address;
+-#if !(defined(__CYGWIN__) || defined(__MSYS__)) && !defined(__GNU__)
++#if !(defined(__CYGWIN__) || defined(__MSYS__)) && !defined(__GNU__) && !defined(__onyx__)
+   int i;
+ #endif
+ 
+@@ -126,7 +126,7 @@ int uv_interface_addresses(uv_interface_
+     address++;
+   }
+ 
+-#if !(defined(__CYGWIN__) || defined(__MSYS__)) && !defined(__GNU__)
++#if !(defined(__CYGWIN__) || defined(__MSYS__)) && !defined(__GNU__) && !defined(__onyx__)
+   /* Fill in physical addresses for each interface */
+   for (ent = addrs; ent != NULL; ent = ent->ifa_next) {
+     if (uv__ifaddr_exclude(ent, UV__EXCLUDE_IFPHYS))
+Index: libuv-v1.49.2/src/unix/onyx.c
+===================================================================
+--- /dev/null
++++ libuv-v1.49.2/src/unix/onyx.c
+@@ -0,0 +1,291 @@
++#include "uv.h"
++#include "internal.h"
++
++#include <unistd.h>
++
++uint64_t uv_get_available_memory(void)
++{
++	return uv_get_free_memory();
++}
++
++uint64_t uv_get_constrained_memory(void)
++{
++	return 0;
++}
++
++void uv__set_process_title(const char* title) {
++#if defined(PR_SET_NAME)
++  prctl(PR_SET_NAME, title);  /* Only copies first 16 characters. */
++#endif
++}
++
++int uv_resident_set_memory(size_t* rss) {
++  char buf[1024];
++  const char* s;
++  long val;
++  int rc;
++  int i;
++
++  /* rss: 24th element */
++  rc = uv__slurp("/proc/self/stat", buf, sizeof(buf));
++  if (rc < 0)
++    return rc;
++
++  /* find the last ')' */
++  s = strrchr(buf, ')');
++  if (s == NULL)
++    goto err;
++
++  for (i = 1; i <= 22; i++) {
++    s = strchr(s + 1, ' ');
++    if (s == NULL)
++      goto err;
++  }
++
++  errno = 0;
++  val = strtol(s, NULL, 10);
++  if (val < 0 || errno != 0)
++    goto err;
++
++  *rss = val * getpagesize();
++  return 0;
++
++err:
++  return UV_EINVAL;
++}
++
++
++int uv_cpu_info(uv_cpu_info_t** ci, int* count) {
++#if defined(__PPC__)
++  static const char model_marker[] = "cpu\t\t: ";
++#elif defined(__arm__)
++  static const char model_marker[] = "Processor\t: ";
++#elif defined(__aarch64__)
++  static const char model_marker[] = "CPU part\t: ";
++#elif defined(__mips__)
++  static const char model_marker[] = "cpu model\t\t: ";
++#elif defined(__loongarch__)
++  static const char model_marker[] = "cpu family\t\t: ";
++#else
++  static const char model_marker[] = "model name\t: ";
++#endif
++  static const char parts[] =
++#ifdef __aarch64__
++    "0x811\nARM810\n"       "0x920\nARM920\n"      "0x922\nARM922\n"
++    "0x926\nARM926\n"       "0x940\nARM940\n"      "0x946\nARM946\n"
++    "0x966\nARM966\n"       "0xa20\nARM1020\n"      "0xa22\nARM1022\n"
++    "0xa26\nARM1026\n"      "0xb02\nARM11 MPCore\n" "0xb36\nARM1136\n"
++    "0xb56\nARM1156\n"      "0xb76\nARM1176\n"      "0xc05\nCortex-A5\n"
++    "0xc07\nCortex-A7\n"    "0xc08\nCortex-A8\n"    "0xc09\nCortex-A9\n"
++    "0xc0d\nCortex-A17\n"   /* Originally A12 */
++    "0xc0f\nCortex-A15\n"   "0xc0e\nCortex-A17\n"   "0xc14\nCortex-R4\n"
++    "0xc15\nCortex-R5\n"    "0xc17\nCortex-R7\n"    "0xc18\nCortex-R8\n"
++    "0xc20\nCortex-M0\n"    "0xc21\nCortex-M1\n"    "0xc23\nCortex-M3\n"
++    "0xc24\nCortex-M4\n"    "0xc27\nCortex-M7\n"    "0xc60\nCortex-M0+\n"
++    "0xd01\nCortex-A32\n"   "0xd03\nCortex-A53\n"   "0xd04\nCortex-A35\n"
++    "0xd05\nCortex-A55\n"   "0xd06\nCortex-A65\n"   "0xd07\nCortex-A57\n"
++    "0xd08\nCortex-A72\n"   "0xd09\nCortex-A73\n"   "0xd0a\nCortex-A75\n"
++    "0xd0b\nCortex-A76\n"   "0xd0c\nNeoverse-N1\n"  "0xd0d\nCortex-A77\n"
++    "0xd0e\nCortex-A76AE\n" "0xd13\nCortex-R52\n"   "0xd20\nCortex-M23\n"
++    "0xd21\nCortex-M33\n"   "0xd41\nCortex-A78\n"   "0xd42\nCortex-A78AE\n"
++    "0xd4a\nNeoverse-E1\n"  "0xd4b\nCortex-A78C\n"
++#endif
++    "";
++  struct cpu {
++    unsigned long long freq, user, nice, sys, idle, irq;
++    unsigned model;
++  };
++  FILE* fp;
++  char* p;
++  int found;
++  int n;
++  unsigned i;
++  unsigned cpu;
++  unsigned maxcpu;
++  unsigned size;
++  unsigned long long skip;
++  struct cpu (*cpus)[8192];  /* Kernel maximum. */
++  struct cpu* c;
++  struct cpu t;
++  char (*model)[64];
++  unsigned char bitmap[ARRAY_SIZE(*cpus) / 8];
++  /* Assumption: even big.LITTLE systems will have only a handful
++   * of different CPU models. Most systems will just have one.
++   */
++  char models[8][64];
++  char buf[1024];
++
++  memset(bitmap, 0, sizeof(bitmap));
++  memset(models, 0, sizeof(models));
++  snprintf(*models, sizeof(*models), "unknown");
++  maxcpu = 0;
++
++  cpus = uv__calloc(ARRAY_SIZE(*cpus), sizeof(**cpus));
++  if (cpus == NULL)
++    return UV_ENOMEM;
++
++  fp = uv__open_file("/proc/stat");
++  if (fp == NULL) {
++    uv__free(cpus);
++    return UV__ERR(errno);
++  }
++
++  if (NULL == fgets(buf, sizeof(buf), fp))
++    abort();
++
++  for (;;) {
++    memset(&t, 0, sizeof(t));
++
++    n = fscanf(fp, "cpu%u %llu %llu %llu %llu %llu %llu",
++               &cpu, &t.user, &t.nice, &t.sys, &t.idle, &skip, &t.irq);
++
++    if (n != 7)
++      break;
++
++    if (NULL == fgets(buf, sizeof(buf), fp))
++      abort();
++
++    if (cpu >= ARRAY_SIZE(*cpus))
++      continue;
++
++    (*cpus)[cpu] = t;
++
++    bitmap[cpu >> 3] |= 1 << (cpu & 7);
++
++    if (cpu >= maxcpu)
++      maxcpu = cpu + 1;
++  }
++
++  fclose(fp);
++
++  fp = uv__open_file("/proc/cpuinfo");
++  if (fp == NULL)
++    goto nocpuinfo;
++
++  for (;;) {
++    if (1 != fscanf(fp, "processor\t: %u\n", &cpu))
++      break;  /* Parse error. */
++
++    found = 0;
++    while (!found && fgets(buf, sizeof(buf), fp))
++      found = !strncmp(buf, model_marker, sizeof(model_marker) - 1);
++
++    if (!found)
++      goto next;
++
++    p = buf + sizeof(model_marker) - 1;
++    n = (int) strcspn(p, "\n");
++
++    /* arm64: translate CPU part code to model name. */
++    if (*parts) {
++      p = memmem(parts, sizeof(parts) - 1, p, n + 1);
++      if (p == NULL)
++        p = "unknown";
++      else
++        p += n + 1;
++      n = (int) strcspn(p, "\n");
++    }
++
++    found = 0;
++    for (model = models; !found && model < ARRAY_END(models); model++)
++      found = !strncmp(p, *model, strlen(*model));
++
++    if (!found)
++      goto next;
++
++    if (**model == '\0')
++      snprintf(*model, sizeof(*model), "%.*s", n, p);
++
++    if (cpu < maxcpu)
++      (*cpus)[cpu].model = model - models;
++
++next:
++    while (fgets(buf, sizeof(buf), fp))
++      if (*buf == '\n')
++        break;
++  }
++
++  fclose(fp);
++  fp = NULL;
++
++nocpuinfo:
++
++  n = 0;
++  for (cpu = 0; cpu < maxcpu; cpu++) {
++    if (!(bitmap[cpu >> 3] & (1 << (cpu & 7))))
++      continue;
++
++    n++;
++    snprintf(buf, sizeof(buf),
++             "/sys/devices/system/cpu/cpu%u/cpufreq/scaling_cur_freq", cpu);
++
++    fp = uv__open_file(buf);
++    if (fp == NULL)
++      continue;
++
++    if (1 != fscanf(fp, "%llu", &(*cpus)[cpu].freq))
++      abort();
++    fclose(fp);
++    fp = NULL;
++  }
++
++  size = n * sizeof(**ci) + sizeof(models);
++  *ci = uv__malloc(size);
++  *count = 0;
++
++  if (*ci == NULL) {
++    uv__free(cpus);
++    return UV_ENOMEM;
++  }
++
++  *count = n;
++  p = memcpy(*ci + n, models, sizeof(models));
++
++  i = 0;
++  for (cpu = 0; cpu < maxcpu; cpu++) {
++    if (!(bitmap[cpu >> 3] & (1 << (cpu & 7))))
++      continue;
++
++    c = *cpus + cpu;
++
++    (*ci)[i++] = (uv_cpu_info_t) {
++      .model     = p + c->model * sizeof(*model),
++      .speed     = c->freq / 1000,
++      /* Note: sysconf(_SC_CLK_TCK) is fixed at 100 Hz,
++       * therefore the multiplier is always 1000/100 = 10.
++       */
++      .cpu_times = (struct uv_cpu_times_s) {
++        .user = 10 * c->user,
++        .nice = 10 * c->nice,
++        .sys  = 10 * c->sys,
++        .idle = 10 * c->idle,
++        .irq  = 10 * c->irq,
++      },
++    };
++  }
++
++  uv__free(cpus);
++
++  return 0;
++}
++
++
++int uv_uptime(double* uptime) {
++  struct timespec now;
++  char buf[128];
++
++  /* Consult /proc/uptime when present (common case), or fall back to
++   * clock_gettime. Why not always clock_gettime? It doesn't always return the
++   * right result under OpenVZ and possibly other containerized environments.
++   */
++  if (0 == uv__slurp("/proc/uptime", buf, sizeof(buf)))
++    if (1 == sscanf(buf, "%lf", uptime))
++      return 0;
++
++  if (clock_gettime(CLOCK_BOOTTIME, &now))
++    return UV__ERR(errno);
++
++  *uptime = now.tv_sec;
++  return 0;
++}
++
+Index: libuv-v1.49.2/src/uv-common.h
+===================================================================
+--- libuv-v1.49.2.orig/src/uv-common.h
++++ libuv-v1.49.2/src/uv-common.h
+@@ -396,7 +396,7 @@ struct uv__loop_metrics_s {
+ void uv__metrics_update_idle_time(uv_loop_t* loop);
+ void uv__metrics_set_provider_entry_time(uv_loop_t* loop);
+ 
+-#ifdef __linux__
++#if defined(__linux__) || defined(__onyx__)
+ struct uv__iou {
+   uint32_t* sqhead;
+   uint32_t* sqtail;
+@@ -421,7 +421,7 @@ struct uv__loop_internal_fields_s {
+   unsigned int flags;
+   uv__loop_metrics_t loop_metrics;
+   int current_timeout;
+-#ifdef __linux__
++#if defined(__linux__) || defined(__onyx__)
+   struct uv__iou ctl;
+   struct uv__iou iou;
+   void* inv;  /* used by uv__platform_invalidate_fd() */

base-commit: f86e5e56e20847a9f1630bf6edfe66c3294fdf92
-- 
2.46.2

